monolog:
  handlers:
    main:
      type: fingers_crossed
      action_level: error
      handler: nested
      excluded_http_codes: [404, 405]
      buffer_size: 50 # How many messages should be saved? Prevent memory leaks
    nested:
      type: rotating_file
      path: "%kernel.logs_dir%/%kernel.environment%.log"
      level: debug
    console:
      type: console
      process_psr_3_messages: false
      channels: ["!event", "!doctrine"]
    deprecation:
      type: rotating_file
      path: "%kernel.logs_dir%/%kernel.environment%.deprecations.log"
    deprecation_filter:
      type: filter
      handler: deprecation
      max_level: info
      channels: ["php"]
  channels: ["main", "console", "deprecation"]
services:
  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services
    public: true

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  LoggingBundle\:
    resource: '../../*'
    exclude: '../../{DependencyInjection}'

  Monolog\Formatter\JsonFormatter: ~

  monolog.processor.memoryPeakUsageProcessor:
    class: Monolog\Processor\MemoryPeakUsageProcessor
    tags:
      - { name: monolog.processor }

  monolog.processor.memoryUsageProcessor:
    class: Monolog\Processor\MemoryUsageProcessor
    tags:
      - { name: monolog.processor }

  monolog.processor.introspectionProcessor:
    class: Monolog\Processor\IntrospectionProcessor
    tags:
      - { name: monolog.processor }
